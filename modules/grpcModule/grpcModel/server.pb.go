// Code generated by protoc-gen-go. DO NOT EDIT.
// source: server.proto

package grpcModel

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Msg struct {
	ModuleName           string   `protobuf:"bytes,1,opt,name=moduleName,proto3" json:"moduleName,omitempty"`
	EventName            string   `protobuf:"bytes,2,opt,name=eventName,proto3" json:"eventName,omitempty"`
	MsgId                string   `protobuf:"bytes,3,opt,name=msgId,proto3" json:"msgId,omitempty"`
	Payload              string   `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Msg) Reset()         { *m = Msg{} }
func (m *Msg) String() string { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()    {}
func (*Msg) Descriptor() ([]byte, []int) {
	return fileDescriptor_ad098daeda4239f7, []int{0}
}

func (m *Msg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Msg.Unmarshal(m, b)
}
func (m *Msg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Msg.Marshal(b, m, deterministic)
}
func (m *Msg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Msg.Merge(m, src)
}
func (m *Msg) XXX_Size() int {
	return xxx_messageInfo_Msg.Size(m)
}
func (m *Msg) XXX_DiscardUnknown() {
	xxx_messageInfo_Msg.DiscardUnknown(m)
}

var xxx_messageInfo_Msg proto.InternalMessageInfo

func (m *Msg) GetModuleName() string {
	if m != nil {
		return m.ModuleName
	}
	return ""
}

func (m *Msg) GetEventName() string {
	if m != nil {
		return m.EventName
	}
	return ""
}

func (m *Msg) GetMsgId() string {
	if m != nil {
		return m.MsgId
	}
	return ""
}

func (m *Msg) GetPayload() string {
	if m != nil {
		return m.Payload
	}
	return ""
}

func init() {
	proto.RegisterType((*Msg)(nil), "inf.Msg")
}

func init() { proto.RegisterFile("server.proto", fileDescriptor_ad098daeda4239f7) }

var fileDescriptor_ad098daeda4239f7 = []byte{
	// 164 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x4e, 0x2d, 0x2a,
	0x4b, 0x2d, 0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xce, 0xcc, 0x4b, 0x53, 0x2a, 0xe6,
	0x62, 0xf6, 0x2d, 0x4e, 0x17, 0x92, 0xe3, 0xe2, 0xca, 0xcd, 0x4f, 0x29, 0xcd, 0x49, 0xf5, 0x4b,
	0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60, 0xd4, 0xe0, 0x0c, 0x42, 0x12, 0x11, 0x92, 0xe1, 0xe2, 0x4c,
	0x2d, 0x4b, 0xcd, 0x2b, 0x01, 0x4b, 0x33, 0x81, 0xa5, 0x11, 0x02, 0x42, 0x22, 0x5c, 0xac, 0xb9,
	0xc5, 0xe9, 0x9e, 0x29, 0x12, 0xcc, 0x60, 0x19, 0x08, 0x47, 0x48, 0x82, 0x8b, 0xbd, 0x20, 0xb1,
	0x32, 0x27, 0x3f, 0x31, 0x45, 0x82, 0x05, 0x2c, 0x0e, 0xe3, 0x1a, 0xe9, 0x70, 0xb1, 0x24, 0xe7,
	0xe7, 0xe5, 0x09, 0xa9, 0x70, 0x71, 0x04, 0x85, 0x07, 0x97, 0x14, 0xa5, 0x26, 0xe6, 0x0a, 0x71,
	0xe8, 0x65, 0xe6, 0xa5, 0xe9, 0xf9, 0x16, 0xa7, 0x4b, 0xc1, 0x59, 0x4a, 0x0c, 0x1a, 0x8c, 0x06,
	0x8c, 0x49, 0x6c, 0x60, 0xe7, 0x1a, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x21, 0xcc, 0xdb,
	0xbe, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConnClient is the client API for Conn service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConnClient interface {
	// Sends a greeting
	RWStream(ctx context.Context, opts ...grpc.CallOption) (Conn_RWStreamClient, error)
}

type connClient struct {
	cc *grpc.ClientConn
}

func NewConnClient(cc *grpc.ClientConn) ConnClient {
	return &connClient{cc}
}

func (c *connClient) RWStream(ctx context.Context, opts ...grpc.CallOption) (Conn_RWStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Conn_serviceDesc.Streams[0], "/inf.conn/RWStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &connRWStreamClient{stream}
	return x, nil
}

type Conn_RWStreamClient interface {
	Send(*Msg) error
	Recv() (*Msg, error)
	grpc.ClientStream
}

type connRWStreamClient struct {
	grpc.ClientStream
}

func (x *connRWStreamClient) Send(m *Msg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *connRWStreamClient) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ConnServer is the server API for Conn service.
type ConnServer interface {
	// Sends a greeting
	RWStream(Conn_RWStreamServer) error
}

func RegisterConnServer(s *grpc.Server, srv ConnServer) {
	s.RegisterService(&_Conn_serviceDesc, srv)
}

func _Conn_RWStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ConnServer).RWStream(&connRWStreamServer{stream})
}

type Conn_RWStreamServer interface {
	Send(*Msg) error
	Recv() (*Msg, error)
	grpc.ServerStream
}

type connRWStreamServer struct {
	grpc.ServerStream
}

func (x *connRWStreamServer) Send(m *Msg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *connRWStreamServer) Recv() (*Msg, error) {
	m := new(Msg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Conn_serviceDesc = grpc.ServiceDesc{
	ServiceName: "inf.conn",
	HandlerType: (*ConnServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RWStream",
			Handler:       _Conn_RWStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "server.proto",
}
